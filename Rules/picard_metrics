import os
import snakemake.io
import glob

# Extract sample names for the pipeline
SAMPLES = glob_wildcards("{sample}_filtered.sorted.bam").sample
rule all:
    input:
        # Output form markduplicates
        expand("markdupl/{sample}.markdup.bam", sample=SAMPLES),
        expand("markdupl/{sample}_picard_markdup_raw_metrics.txt", sample=SAMPLES),
        # Outputs of the hs_metrics
        expand("metrics/{sample}_hs_metrics.txt", sample=SAMPLES),
        expand("metrics/{sample}_pertargetcoverage.txt", sample=SAMPLES),
        # Outputs of the multiple_metrics
        expand("metrics/{sample}_multi_metrics.alignment_summary_metrics.txt", sample=SAMPLES),
        expand("metrics/{sample}_multi_metrics.gc_bias.detail_metrics.txt", sample=SAMPLES),
        expand("metrics/{sample}_multi_metrics.gc_bias.pdf", sample=SAMPLES),
        expand("metrics/{sample}_multi_metrics.gc_bias.summary_metrics.txt", sample=SAMPLES),
        expand("metrics/{sample}_multi_metrics.insert_size_histogram.pdf", sample=SAMPLES),
        expand("metrics/{sample}_multi_metrics.insert_size_metrics.txt", sample=SAMPLES),
        expand("metrics/{sample}_multi_metrics.read_length_histogram.pdf", sample=SAMPLES)
# Rule for marking duplicates with picard
rule picard_markduplicates:
    input:
        bam="{sample}_filtered.sorted.bam"
    output:
        bam="markdupl/{sample}.markdup.bam",
        metrics="markdupl/{sample}_picard_markdup_raw_metrics.txt"
    params:
        mem="22g",
        reference="/Users/gyongyosilab/Documents/ccfDNA_Projekt/Reference_Sequences/hg38.fa"
    conda:
        "picard"  # Replace with the path to your picard conda environment YAML file
    shell:
        """
        picard -Xmx{params.mem} -Xms{params.mem} MarkDuplicates \
            -I {input.bam} \
            -O {output.bam} \
            --REFERENCE_SEQUENCE {params.reference} \
            --METRICS_FILE {output.metrics} \
            --CREATE_INDEX false \
            --MAX_RECORDS_IN_RAM 1000 \
            --SORTING_COLLECTION_SIZE_RATIO 0.15 \
            --ASSUME_SORTED true \
            --OPTICAL_DUPLICATE_PIXEL_DISTANCE 2500
        """

# Rule for indexing the marked duplicates BAM file with samtools
rule samtools_index:
    input:
        bam="markdupl/{sample}.markdup.bam"
    output:
        bai="markdupl/{sample}.markdup.bam.bai" #output of samtools is in the same directory
    conda: 
        "methylenv"  # Replace with the path to your methylenv conda environment YAML file
    shell:
        """
        samtools index -@ 16 {input.bam} 
        """

# Rule for collecting hybrid selection metrics with Picard
rule collect_hs_metrics:
    input:
        bam="markdupl/{sample}.markdup.bam",  # Input BAM file
        reference="/Users/gyongyosilab/Documents/ccfDNA_Projekt/Reference_Sequences/hg38.fa",  # Reference genome
        bait_intervals="/Users/gyongyosilab/Documents/ccfDNA_Projekt/Reference_Sequences/covered_targets_Twist_Methylome_hg38_annotated_collapsed_intervals",  # Bait intervals
        target_intervals="/Users/gyongyosilab/Documents/ccfDNA_Projekt/Reference_Sequences/covered_targets_Twist_Methylome_hg38_annotated_collapsed_intervals"  # Target intervals
    output:
        metrics="metrics/{sample}_hs_metrics.txt",  # Output metrics file
        per_target_coverage="metrics/{sample}_pertargetcoverage.txt"  # Per-target coverage output
    params:
        mem="22g",  # Memory for Picard
    conda:
        "picard"  # Conda environment for Picard
    shell:
        """
        picard -Xmx{params.mem} -Xms{params.mem} CollectHsMetrics \
            --INPUT {input.bam} \
            --OUTPUT {output.metrics} \
            -R {input.reference} \
            --BAIT_INTERVALS {input.bait_intervals} \
            --TARGET_INTERVALS {input.target_intervals} \
            --MINIMUM_MAPPING_QUALITY 20 \
            --COVERAGE_CAP 1000 \
            --PER_TARGET_COVERAGE {output.per_target_coverage} \
            --NEAR_DISTANCE 500
        """
rule collect_multiple_metrics:
    input:
        bam="markdupl/{sample}.markdup.bam",  # Input BAM file
        reference="/Users/gyongyosilab/Documents/ccfDNA_Projekt/Reference_Sequences/hg38.fa"  # Reference genome
    output:
        # Use a directory wildcard to capture all outputs
        alignment_summary_metrics="metrics/{sample}_multi_metrics.alignment_summary_metrics.txt",
        gc_bias_detail_metrics="metrics/{sample}_multi_metrics.gc_bias.detail_metrics.txt",
        gc_bias="metrics/{sample}_multi_metrics.gc_bias.pdf", 
        gc_bias_summary_metrics="metrics/{sample}_multi_metrics.gc_bias.summary_metrics.txt", 
        insert_size_histogram="metrics/{sample}_multi_metrics.insert_size_histogram.pdf", 
        insert_size_metrics="metrics/{sample}_multi_metrics.insert_size_metrics.",
        read_length_histogram="metrics/{sample}_multi_metrics.read_length_histogram.pdf"
    params:    
        mem="22g",  # Memory for Picard
    conda:
        "picard"  # Conda environment for Picard
    shell:
        """
        picard -Xmx{params.mem} -Xms{params.mem} CollectMultipleMetrics \
            --INPUT {input.bam} \
            --OUTPUT metrics/{wildcards.sample}_multi_metrics \
            -R {input.reference} \
            --PROGRAM CollectGcBiasMetrics \
            --PROGRAM CollectInsertSizeMetrics \
            --PROGRAM CollectAlignmentSummaryMetrics	
        """
